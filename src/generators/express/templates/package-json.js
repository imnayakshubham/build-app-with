/**
 * Generate package.json for Express.js project
 */

import { FRAMEWORKS, DATABASES, AUTH_STRATEGIES } from '../../../types/index.js';

export function generatePackageJson(answers) {
    const basePackage = {
        name: answers.projectName,
        version: '1.0.0',
        description: `A production-ready Express.js application - ${answers.projectName}`,
        main: 'src/server.js',
        type: 'module',
        scripts: {
            start: 'node src/server.js',
            dev: 'nodemon src/server.js',
            test: answers.includeTests ? 'jest' : undefined,
            'test:watch': answers.includeTests ? 'jest --watch' : undefined,
            'test:coverage': answers.includeTests ? 'jest --coverage' : undefined
        },
        keywords: [
            'express',
            'nodejs',
            'api',
            'backend',
            'server',
            'rest',
            'production-ready'
        ],
        author: 'Generated by create-new-app',
        license: 'MIT',
        engines: {
            node: '>=18.0.0'
        },
        dependencies: {},
        devDependencies: {}
    };

    // Add database-specific scripts
    if (answers.database === DATABASES.POSTGRESQL || answers.database === DATABASES.SQLITE) {
        basePackage.scripts['db:generate'] = 'prisma generate';
        basePackage.scripts['db:push'] = 'prisma db push';
        basePackage.scripts['db:migrate'] = 'prisma migrate dev';
        basePackage.scripts['db:studio'] = 'prisma studio';
    }

    // Remove undefined scripts
    Object.keys(basePackage.scripts).forEach(key => {
        if (basePackage.scripts[key] === undefined) {
            delete basePackage.scripts[key];
        }
    });

    return basePackage;
}
