/**
 * Simplified Express.js project generator
 */

import fs from 'fs-extra';
import path from 'path';
import { logger } from '../../core/logger.js';
import { generateCreditsSection } from '../../utils/credits.js';

export async function generateSimpleExpressProject(projectPath, answers) {
  console.log('generateSimpleExpressProject started');

  try {
    // Create project directory first
    console.log('Creating project directory...');
    await fs.ensureDir(projectPath);
    console.log('Project directory created');

    // Start spinner after directory creation
    const spinner = logger.startSpinner('Generating Express.js project structure...');

    logger.info('Generating package.json...');
    const packageJson = {
      name: answers.projectName,
      version: '1.0.0',
      description: `A production-ready Express.js application - ${answers.projectName}`,
      main: 'src/server.js',
      type: 'module',
      scripts: {
        start: 'node src/server.js',
        dev: 'nodemon src/server.js',
        test: 'jest'
      },
      keywords: ['express', 'nodejs', 'api', 'backend'],
      author: 'Generated by create-app-with',
      license: 'MIT',
      engines: {
        node: '>=18.0.0'
      },
      dependencies: {
        'express': '^4.18.2',
        'cors': '^2.8.5',
        'helmet': '^7.1.0',
        'morgan': '^1.10.0',
        'dotenv': '^16.3.1',
        'mongoose': '^8.0.3',
        'jsonwebtoken': '^9.0.2',
        'bcryptjs': '^2.4.3'
      },
      devDependencies: {
        'nodemon': '^3.0.2',
        'jest': '^29.7.0',
        'supertest': '^6.3.3'
      }
    };

    await fs.writeJSON(path.join(projectPath, 'package.json'), packageJson, { spaces: 2 });

    logger.info('Creating src directory...');
    await fs.ensureDir(path.join(projectPath, 'src'));

    logger.info('Generating app.js...');
    const appJs = `import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const app = express();

// Security middleware
app.use(helmet());

// CORS configuration
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

// Logging middleware
app.use(morgan('combined'));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API routes
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to ${answers.projectName} API',
    version: '1.0.0',
    endpoints: {
      health: '/health',
      api: '/api'
    }
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    error: 'Something went wrong!',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: \`Route \${req.originalUrl} not found\`
  });
});

export default app;
`;

    await fs.writeFile(path.join(projectPath, 'src', 'app.js'), appJs);

    logger.info('Generating server.js...');
    const serverJs = `import app from './app.js';

const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

app.listen(PORT, () => {
  console.log(\`🚀 Server running on port \${PORT} in \${NODE_ENV} mode\`);
  console.log(\`📊 Health check: http://localhost:\${PORT}/health\`);
  console.log(\`🔗 API endpoint: http://localhost:\${PORT}/api\`);
});
`;

    await fs.writeFile(path.join(projectPath, 'src', 'server.js'), serverJs);

    logger.info('Generating .env.example...');
    const envExample = `# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/${answers.projectName}

# Authentication
JWT_SECRET=your-super-secret-jwt-key
JWT_EXPIRES_IN=7d

# CORS
CORS_ORIGIN=http://localhost:3000
`;

    await fs.writeFile(path.join(projectPath, '.env.example'), envExample);

    logger.info('Generating .gitignore...');
    const gitignore = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory
coverage/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Build output
dist/
build/
`;

    await fs.writeFile(path.join(projectPath, '.gitignore'), gitignore);

    logger.info('Generating README...');

    // Generate credits asynchronously
    const allFeatures = ['express', 'mongodb', 'jwt', 'cors', 'helmet', 'morgan'];
    const credits = await Promise.resolve(generateCreditsSection('express', allFeatures));

    const readme = `# ${answers.projectName}

A production-ready Express.js application built with modern best practices.

## 🚀 Features

- ⚡ **Express.js** - Fast, unopinionated web framework
- 🔒 **Security** - Helmet, CORS, JWT authentication
- 🗄️ **Database** - MongoDB with Mongoose
- 📝 **Logging** - Morgan HTTP request logger
- ✅ **Validation** - Request validation and sanitization
- 🧪 **Testing** - Jest and Supertest setup

## 🚀 Getting Started

1. **Install dependencies**
   \`\`\`bash
   npm install
   \`\`\`

2. **Set up environment variables**
   \`\`\`bash
   cp .env.example .env
   # Edit .env with your configuration
   \`\`\`

3. **Start the development server**
   \`\`\`bash
   npm run dev
   \`\`\`

The server will start on \`http://localhost:3000\`

## 📚 API Endpoints

- **Health Check**: \`GET /health\`
- **API Info**: \`GET /api\`

## 📝 Available Scripts

- \`npm start\` - Start production server
- \`npm run dev\` - Start development server with nodemon
- \`npm test\` - Run tests

## License

MIT

${credits}
`;

    await fs.writeFile(path.join(projectPath, 'README.md'), readme);

    spinner.succeed('Project structure generated successfully!');

    logger.info('Project structure created! Next steps:');
    logger.info(`  cd ${path.basename(projectPath)}`);
    logger.info('  npm install');
    logger.info('  npm run dev');

  } catch (error) {
    spinner.fail('Failed to generate project structure');
    throw error;
  }
}
